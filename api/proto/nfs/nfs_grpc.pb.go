// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: nfs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NFSService_CreateSharedFolder_FullMethodName    = "/nfs.NFSService/CreateSharedFolder"
	NFSService_RemoveSharedFolder_FullMethodName    = "/nfs.NFSService/RemoveSharedFolder"
	NFSService_MountFolder_FullMethodName           = "/nfs.NFSService/MountFolder"
	NFSService_UnmountFolder_FullMethodName         = "/nfs.NFSService/UnmountFolder"
	NFSService_SyncSharedFolder_FullMethodName      = "/nfs.NFSService/SyncSharedFolder"
	NFSService_GetSharedFolderStatus_FullMethodName = "/nfs.NFSService/GetSharedFolderStatus"
	NFSService_ListFolderContents_FullMethodName    = "/nfs.NFSService/ListFolderContents"
	NFSService_CanFindFileOrDir_FullMethodName      = "/nfs.NFSService/CanFindFileOrDir"
	NFSService_DownloadIso_FullMethodName           = "/nfs.NFSService/DownloadIso"
)

// NFSServiceClient is the client API for NFSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NFSServiceClient interface {
	CreateSharedFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*CreateResponse, error)
	RemoveSharedFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*CreateResponse, error)
	MountFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*MountResponse, error)
	UnmountFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*UnmountResponse, error)
	SyncSharedFolder(ctx context.Context, in *FolderMountList, opts ...grpc.CallOption) (*CreateResponse, error)
	GetSharedFolderStatus(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*SharedFolderStatusResponse, error)
	ListFolderContents(ctx context.Context, in *FolderPath, opts ...grpc.CallOption) (*FolderContents, error)
	CanFindFileOrDir(ctx context.Context, in *FolderPath, opts ...grpc.CallOption) (*CreateResponse, error)
	// nao devia estar aqui mas como download iso vai fazer download num folderMount facilita
	DownloadIso(ctx context.Context, in *DownloadIsoRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type nFSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNFSServiceClient(cc grpc.ClientConnInterface) NFSServiceClient {
	return &nFSServiceClient{cc}
}

func (c *nFSServiceClient) CreateSharedFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, NFSService_CreateSharedFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) RemoveSharedFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, NFSService_RemoveSharedFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) MountFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*MountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, NFSService_MountFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) UnmountFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*UnmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmountResponse)
	err := c.cc.Invoke(ctx, NFSService_UnmountFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) SyncSharedFolder(ctx context.Context, in *FolderMountList, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, NFSService_SyncSharedFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) GetSharedFolderStatus(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*SharedFolderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharedFolderStatusResponse)
	err := c.cc.Invoke(ctx, NFSService_GetSharedFolderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) ListFolderContents(ctx context.Context, in *FolderPath, opts ...grpc.CallOption) (*FolderContents, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolderContents)
	err := c.cc.Invoke(ctx, NFSService_ListFolderContents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) CanFindFileOrDir(ctx context.Context, in *FolderPath, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, NFSService_CanFindFileOrDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) DownloadIso(ctx context.Context, in *DownloadIsoRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, NFSService_DownloadIso_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NFSServiceServer is the server API for NFSService service.
// All implementations must embed UnimplementedNFSServiceServer
// for forward compatibility
type NFSServiceServer interface {
	CreateSharedFolder(context.Context, *FolderMount) (*CreateResponse, error)
	RemoveSharedFolder(context.Context, *FolderMount) (*CreateResponse, error)
	MountFolder(context.Context, *FolderMount) (*MountResponse, error)
	UnmountFolder(context.Context, *FolderMount) (*UnmountResponse, error)
	SyncSharedFolder(context.Context, *FolderMountList) (*CreateResponse, error)
	GetSharedFolderStatus(context.Context, *FolderMount) (*SharedFolderStatusResponse, error)
	ListFolderContents(context.Context, *FolderPath) (*FolderContents, error)
	CanFindFileOrDir(context.Context, *FolderPath) (*CreateResponse, error)
	// nao devia estar aqui mas como download iso vai fazer download num folderMount facilita
	DownloadIso(context.Context, *DownloadIsoRequest) (*CreateResponse, error)
	mustEmbedUnimplementedNFSServiceServer()
}

// UnimplementedNFSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNFSServiceServer struct {
}

func (UnimplementedNFSServiceServer) CreateSharedFolder(context.Context, *FolderMount) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSharedFolder not implemented")
}
func (UnimplementedNFSServiceServer) RemoveSharedFolder(context.Context, *FolderMount) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSharedFolder not implemented")
}
func (UnimplementedNFSServiceServer) MountFolder(context.Context, *FolderMount) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountFolder not implemented")
}
func (UnimplementedNFSServiceServer) UnmountFolder(context.Context, *FolderMount) (*UnmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountFolder not implemented")
}
func (UnimplementedNFSServiceServer) SyncSharedFolder(context.Context, *FolderMountList) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSharedFolder not implemented")
}
func (UnimplementedNFSServiceServer) GetSharedFolderStatus(context.Context, *FolderMount) (*SharedFolderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedFolderStatus not implemented")
}
func (UnimplementedNFSServiceServer) ListFolderContents(context.Context, *FolderPath) (*FolderContents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFolderContents not implemented")
}
func (UnimplementedNFSServiceServer) CanFindFileOrDir(context.Context, *FolderPath) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanFindFileOrDir not implemented")
}
func (UnimplementedNFSServiceServer) DownloadIso(context.Context, *DownloadIsoRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadIso not implemented")
}
func (UnimplementedNFSServiceServer) mustEmbedUnimplementedNFSServiceServer() {}

// UnsafeNFSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NFSServiceServer will
// result in compilation errors.
type UnsafeNFSServiceServer interface {
	mustEmbedUnimplementedNFSServiceServer()
}

func RegisterNFSServiceServer(s grpc.ServiceRegistrar, srv NFSServiceServer) {
	s.RegisterService(&NFSService_ServiceDesc, srv)
}

func _NFSService_CreateSharedFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).CreateSharedFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_CreateSharedFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).CreateSharedFolder(ctx, req.(*FolderMount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_RemoveSharedFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).RemoveSharedFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_RemoveSharedFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).RemoveSharedFolder(ctx, req.(*FolderMount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_MountFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).MountFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_MountFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).MountFolder(ctx, req.(*FolderMount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_UnmountFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).UnmountFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_UnmountFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).UnmountFolder(ctx, req.(*FolderMount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_SyncSharedFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMountList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).SyncSharedFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_SyncSharedFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).SyncSharedFolder(ctx, req.(*FolderMountList))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_GetSharedFolderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).GetSharedFolderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_GetSharedFolderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).GetSharedFolderStatus(ctx, req.(*FolderMount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_ListFolderContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).ListFolderContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_ListFolderContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).ListFolderContents(ctx, req.(*FolderPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_CanFindFileOrDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).CanFindFileOrDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_CanFindFileOrDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).CanFindFileOrDir(ctx, req.(*FolderPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_DownloadIso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadIsoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).DownloadIso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_DownloadIso_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).DownloadIso(ctx, req.(*DownloadIsoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NFSService_ServiceDesc is the grpc.ServiceDesc for NFSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NFSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nfs.NFSService",
	HandlerType: (*NFSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSharedFolder",
			Handler:    _NFSService_CreateSharedFolder_Handler,
		},
		{
			MethodName: "RemoveSharedFolder",
			Handler:    _NFSService_RemoveSharedFolder_Handler,
		},
		{
			MethodName: "MountFolder",
			Handler:    _NFSService_MountFolder_Handler,
		},
		{
			MethodName: "UnmountFolder",
			Handler:    _NFSService_UnmountFolder_Handler,
		},
		{
			MethodName: "SyncSharedFolder",
			Handler:    _NFSService_SyncSharedFolder_Handler,
		},
		{
			MethodName: "GetSharedFolderStatus",
			Handler:    _NFSService_GetSharedFolderStatus_Handler,
		},
		{
			MethodName: "ListFolderContents",
			Handler:    _NFSService_ListFolderContents_Handler,
		},
		{
			MethodName: "CanFindFileOrDir",
			Handler:    _NFSService_CanFindFileOrDir_Handler,
		},
		{
			MethodName: "DownloadIso",
			Handler:    _NFSService_DownloadIso_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nfs.proto",
}
