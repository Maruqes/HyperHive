syntax = "proto3";

package virsh;

option go_package = "github.com/Maruqes/512SvMan/api/proto/virsh;proto";

//get cpu features
message Empty {
}

message GetCpuFeaturesResponse {
  repeated string features = 1;
}


message CreateVmRequest{
  string name = 1;
  int32 memory = 2;
  int32 vcpu = 3;
  string disk_folder = 4;
  string disk_path = 5;
  int32 disk_sizeGB = 6;
  string iso_path = 7;
  string network = 8;
  string vnc_password = 9;
  string cpuXml = 10;
}

message OkResponse {
  bool ok = 1;
  string message = 2;
}

enum VmState {
  UNKNOWN = 0;
  RUNNING = 1;
  BLOCKED = 2;
  PAUSED = 3;
  SHUTDOWN = 4;
  SHUTOFF = 5;
  CRASHED = 6;
  PMSUSPENDED = 7;
  NOSTATE = 8;
}

message Vm{
  string machineName = 1;
  string name = 2;
  VmState state = 3;
  string novncPort = 4;
  int32 cpuCount = 5;
  int32 memoryMB = 6;
  int32 currentCpuUsage = 7;
  int32 currentMemoryUsageMB = 8;
  int32 diskSizeGB = 9;
  string diskPath = 10;
  repeated string ip = 12;
}

message GetVmByNameRequest {
  string name = 1;
}

message GetAllVmsResponse {
  repeated Vm vms = 1;
  repeated string warnings = 2;
}


message MigrateVmRequest {
  string name = 2;
  string slaveIp = 3;
  bool live = 4;
  int32 timeoutSeconds = 5;
}

message CPUXMLResponse {
  string cpuXML = 1;
}

message UpdateVMCPUXmlRequest {
  string name = 1;
  string cpuXML = 2;
}


message ColdMigrationRequest {
  string vm_name = 1;
  int32 memory = 2;
  int32 v_cpus = 3;
  string network = 4;
  string vnc_password = 5;
  string cpuXML = 6;
  string disk_path = 7;
  bool live = 8;
}

//defines on slave
service SlaveVirshService {
  rpc GetCpuFeatures(Empty) returns (GetCpuFeaturesResponse);
  rpc GetCPUXML(Empty) returns (CPUXMLResponse);

  rpc GetVMCPUXml(GetVmByNameRequest) returns (CPUXMLResponse);
  rpc UpdateVMCPUXml(UpdateVMCPUXmlRequest) returns (OkResponse);

  rpc CreateVm(CreateVmRequest) returns (OkResponse);

  rpc MigrateVM(MigrateVmRequest) returns (OkResponse);

  rpc ShutdownVM(Vm) returns (OkResponse);
  rpc ForceShutdownVM(Vm) returns (OkResponse);
  rpc StartVM(Vm) returns (OkResponse);
  rpc RemoveVM(Vm) returns (OkResponse);
  rpc RestartVM(Vm) returns (OkResponse);
  rpc PauseVM(Vm) returns (OkResponse);
  rpc ResumeVM(Vm) returns (OkResponse);

  rpc GetAllVms(Empty) returns (GetAllVmsResponse);
  rpc GetVmByName(GetVmByNameRequest) returns (Vm);
  rpc RemoveIsoFromVm(Vm) returns (OkResponse);

  //only sees machine name, cpuCount and memoryMB
  //cpuCount and memoryMB are the new values to set
  rpc EditVmResources(Vm) returns (OkResponse);

  rpc ColdMigrateVm(ColdMigrationRequest) returns (OkResponse);
}
