// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.19.6
// source: logsserve.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Log struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MachineName   string                 `protobuf:"bytes,1,opt,name=machineName,proto3" json:"machineName,omitempty"`
	LogType       int32                  `protobuf:"varint,2,opt,name=logType,proto3" json:"logType,omitempty"` // e.g., 0-info, 1-error, 2-warn, 3-debug
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`  // log content
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_logsserve_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_logsserve_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_logsserve_proto_rawDescGZIP(), []int{0}
}

func (x *Log) GetMachineName() string {
	if x != nil {
		return x.MachineName
	}
	return ""
}

func (x *Log) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *Log) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type LogAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      bool                   `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"` // acknowledgment of log receipt
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogAck) Reset() {
	*x = LogAck{}
	mi := &file_logsserve_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogAck) ProtoMessage() {}

func (x *LogAck) ProtoReflect() protoreflect.Message {
	mi := &file_logsserve_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogAck.ProtoReflect.Descriptor instead.
func (*LogAck) Descriptor() ([]byte, []int) {
	return file_logsserve_proto_rawDescGZIP(), []int{1}
}

func (x *LogAck) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

var File_logsserve_proto protoreflect.FileDescriptor

const file_logsserve_proto_rawDesc = "" +
	"\n" +
	"\x0flogsserve.proto\x12\tlogsserve\"[\n" +
	"\x03Log\x12 \n" +
	"\vmachineName\x18\x01 \x01(\tR\vmachineName\x12\x18\n" +
	"\alogType\x18\x02 \x01(\x05R\alogType\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\"$\n" +
	"\x06LogAck\x12\x1a\n" +
	"\breceived\x18\x01 \x01(\bR\breceived2=\n" +
	"\tLogsServe\x120\n" +
	"\tRecordLog\x12\x0e.logsserve.Log\x1a\x11.logsserve.LogAck(\x01B7Z5github.com/Maruqes/512SvMan/api/proto/logsserve;protob\x06proto3"

var (
	file_logsserve_proto_rawDescOnce sync.Once
	file_logsserve_proto_rawDescData []byte
)

func file_logsserve_proto_rawDescGZIP() []byte {
	file_logsserve_proto_rawDescOnce.Do(func() {
		file_logsserve_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_logsserve_proto_rawDesc), len(file_logsserve_proto_rawDesc)))
	})
	return file_logsserve_proto_rawDescData
}

var file_logsserve_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_logsserve_proto_goTypes = []any{
	(*Log)(nil),    // 0: logsserve.Log
	(*LogAck)(nil), // 1: logsserve.LogAck
}
var file_logsserve_proto_depIdxs = []int32{
	0, // 0: logsserve.LogsServe.RecordLog:input_type -> logsserve.Log
	1, // 1: logsserve.LogsServe.RecordLog:output_type -> logsserve.LogAck
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_logsserve_proto_init() }
func file_logsserve_proto_init() {
	if File_logsserve_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_logsserve_proto_rawDesc), len(file_logsserve_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logsserve_proto_goTypes,
		DependencyIndexes: file_logsserve_proto_depIdxs,
		MessageInfos:      file_logsserve_proto_msgTypes,
	}.Build()
	File_logsserve_proto = out.File
	file_logsserve_proto_goTypes = nil
	file_logsserve_proto_depIdxs = nil
}
