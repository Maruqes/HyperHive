// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: logsserve.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogsServe_RecordLog_FullMethodName = "/logsserve.LogsServe/RecordLog"
)

// LogsServeClient is the client API for LogsServe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// master service
type LogsServeClient interface {
	RecordLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Log, LogAck], error)
}

type logsServeClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsServeClient(cc grpc.ClientConnInterface) LogsServeClient {
	return &logsServeClient{cc}
}

func (c *logsServeClient) RecordLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Log, LogAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogsServe_ServiceDesc.Streams[0], LogsServe_RecordLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Log, LogAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogsServe_RecordLogClient = grpc.ClientStreamingClient[Log, LogAck]

// LogsServeServer is the server API for LogsServe service.
// All implementations must embed UnimplementedLogsServeServer
// for forward compatibility.
//
// master service
type LogsServeServer interface {
	RecordLog(grpc.ClientStreamingServer[Log, LogAck]) error
	mustEmbedUnimplementedLogsServeServer()
}

// UnimplementedLogsServeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogsServeServer struct{}

func (UnimplementedLogsServeServer) RecordLog(grpc.ClientStreamingServer[Log, LogAck]) error {
	return status.Errorf(codes.Unimplemented, "method RecordLog not implemented")
}
func (UnimplementedLogsServeServer) mustEmbedUnimplementedLogsServeServer() {}
func (UnimplementedLogsServeServer) testEmbeddedByValue()                   {}

// UnsafeLogsServeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServeServer will
// result in compilation errors.
type UnsafeLogsServeServer interface {
	mustEmbedUnimplementedLogsServeServer()
}

func RegisterLogsServeServer(s grpc.ServiceRegistrar, srv LogsServeServer) {
	// If the following call pancis, it indicates UnimplementedLogsServeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogsServe_ServiceDesc, srv)
}

func _LogsServe_RecordLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogsServeServer).RecordLog(&grpc.GenericServerStream[Log, LogAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogsServe_RecordLogServer = grpc.ClientStreamingServer[Log, LogAck]

// LogsServe_ServiceDesc is the grpc.ServiceDesc for LogsServe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsServe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logsserve.LogsServe",
	HandlerType: (*LogsServeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordLog",
			Handler:       _LogsServe_RecordLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "logsserve.proto",
}
