// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: logsserve.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LogsServe_RecordLog_FullMethodName = "/logsserve.LogsServe/RecordLog"
)

// LogsServeClient is the client API for LogsServe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsServeClient interface {
	RecordLog(ctx context.Context, opts ...grpc.CallOption) (LogsServe_RecordLogClient, error)
}

type logsServeClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsServeClient(cc grpc.ClientConnInterface) LogsServeClient {
	return &logsServeClient{cc}
}

func (c *logsServeClient) RecordLog(ctx context.Context, opts ...grpc.CallOption) (LogsServe_RecordLogClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogsServe_ServiceDesc.Streams[0], LogsServe_RecordLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &logsServeRecordLogClient{ClientStream: stream}
	return x, nil
}

type LogsServe_RecordLogClient interface {
	Send(*Log) error
	CloseAndRecv() (*LogAck, error)
	grpc.ClientStream
}

type logsServeRecordLogClient struct {
	grpc.ClientStream
}

func (x *logsServeRecordLogClient) Send(m *Log) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logsServeRecordLogClient) CloseAndRecv() (*LogAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogsServeServer is the server API for LogsServe service.
// All implementations must embed UnimplementedLogsServeServer
// for forward compatibility
type LogsServeServer interface {
	RecordLog(LogsServe_RecordLogServer) error
	mustEmbedUnimplementedLogsServeServer()
}

// UnimplementedLogsServeServer must be embedded to have forward compatible implementations.
type UnimplementedLogsServeServer struct {
}

func (UnimplementedLogsServeServer) RecordLog(LogsServe_RecordLogServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordLog not implemented")
}
func (UnimplementedLogsServeServer) mustEmbedUnimplementedLogsServeServer() {}

// UnsafeLogsServeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServeServer will
// result in compilation errors.
type UnsafeLogsServeServer interface {
	mustEmbedUnimplementedLogsServeServer()
}

func RegisterLogsServeServer(s grpc.ServiceRegistrar, srv LogsServeServer) {
	s.RegisterService(&LogsServe_ServiceDesc, srv)
}

func _LogsServe_RecordLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogsServeServer).RecordLog(&logsServeRecordLogServer{ServerStream: stream})
}

type LogsServe_RecordLogServer interface {
	SendAndClose(*LogAck) error
	Recv() (*Log, error)
	grpc.ServerStream
}

type logsServeRecordLogServer struct {
	grpc.ServerStream
}

func (x *logsServeRecordLogServer) SendAndClose(m *LogAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logsServeRecordLogServer) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogsServe_ServiceDesc is the grpc.ServiceDesc for LogsServe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsServe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logsserve.LogsServe",
	HandlerType: (*LogsServeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordLog",
			Handler:       _LogsServe_RecordLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "logsserve.proto",
}
