// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: info.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Info_GetCPUInfo_FullMethodName        = "/info.Info/GetCPUInfo"
	Info_GetMemSummary_FullMethodName     = "/info.Info/GetMemSummary"
	Info_GetDiskSummary_FullMethodName    = "/info.Info/GetDiskSummary"
	Info_GetNetworkSummary_FullMethodName = "/info.Info/GetNetworkSummary"
	Info_StressCPU_FullMethodName         = "/info.Info/StressCPU"
	Info_TestRamMEM_FullMethodName        = "/info.Info/TestRamMEM"
)

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	GetCPUInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CPUCoreInfo, error)
	GetMemSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemSummary, error)
	GetDiskSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DiskSummary, error)
	GetNetworkSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkSummary, error)
	StressCPU(ctx context.Context, in *StressCPUParams, opts ...grpc.CallOption) (*Empty, error)
	TestRamMEM(ctx context.Context, in *TestRamMEMParams, opts ...grpc.CallOption) (*Ok, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetCPUInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CPUCoreInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CPUCoreInfo)
	err := c.cc.Invoke(ctx, Info_GetCPUInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetMemSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemSummary)
	err := c.cc.Invoke(ctx, Info_GetMemSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetDiskSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DiskSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiskSummary)
	err := c.cc.Invoke(ctx, Info_GetDiskSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetNetworkSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkSummary)
	err := c.cc.Invoke(ctx, Info_GetNetworkSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) StressCPU(ctx context.Context, in *StressCPUParams, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Info_StressCPU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) TestRamMEM(ctx context.Context, in *TestRamMEMParams, opts ...grpc.CallOption) (*Ok, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ok)
	err := c.cc.Invoke(ctx, Info_TestRamMEM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	GetCPUInfo(context.Context, *Empty) (*CPUCoreInfo, error)
	GetMemSummary(context.Context, *Empty) (*MemSummary, error)
	GetDiskSummary(context.Context, *Empty) (*DiskSummary, error)
	GetNetworkSummary(context.Context, *Empty) (*NetworkSummary, error)
	StressCPU(context.Context, *StressCPUParams) (*Empty, error)
	TestRamMEM(context.Context, *TestRamMEMParams) (*Ok, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) GetCPUInfo(context.Context, *Empty) (*CPUCoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCPUInfo not implemented")
}
func (UnimplementedInfoServer) GetMemSummary(context.Context, *Empty) (*MemSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemSummary not implemented")
}
func (UnimplementedInfoServer) GetDiskSummary(context.Context, *Empty) (*DiskSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskSummary not implemented")
}
func (UnimplementedInfoServer) GetNetworkSummary(context.Context, *Empty) (*NetworkSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkSummary not implemented")
}
func (UnimplementedInfoServer) StressCPU(context.Context, *StressCPUParams) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StressCPU not implemented")
}
func (UnimplementedInfoServer) TestRamMEM(context.Context, *TestRamMEMParams) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRamMEM not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_GetCPUInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetCPUInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_GetCPUInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetCPUInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetMemSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetMemSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_GetMemSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetMemSummary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetDiskSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetDiskSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_GetDiskSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetDiskSummary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetNetworkSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetNetworkSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_GetNetworkSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetNetworkSummary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_StressCPU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StressCPUParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).StressCPU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_StressCPU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).StressCPU(ctx, req.(*StressCPUParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_TestRamMEM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRamMEMParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).TestRamMEM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_TestRamMEM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).TestRamMEM(ctx, req.(*TestRamMEMParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCPUInfo",
			Handler:    _Info_GetCPUInfo_Handler,
		},
		{
			MethodName: "GetMemSummary",
			Handler:    _Info_GetMemSummary_Handler,
		},
		{
			MethodName: "GetDiskSummary",
			Handler:    _Info_GetDiskSummary_Handler,
		},
		{
			MethodName: "GetNetworkSummary",
			Handler:    _Info_GetNetworkSummary_Handler,
		},
		{
			MethodName: "StressCPU",
			Handler:    _Info_StressCPU_Handler,
		},
		{
			MethodName: "TestRamMEM",
			Handler:    _Info_TestRamMEM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info.proto",
}
