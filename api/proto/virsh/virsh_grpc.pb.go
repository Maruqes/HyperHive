// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: virsh.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SlaveVirshService_GetCpuFeatures_FullMethodName  = "/virsh.SlaveVirshService/GetCpuFeatures"
	SlaveVirshService_GetCPUXML_FullMethodName       = "/virsh.SlaveVirshService/GetCPUXML"
	SlaveVirshService_GetVMCPUXml_FullMethodName     = "/virsh.SlaveVirshService/GetVMCPUXml"
	SlaveVirshService_UpdateVMCPUXml_FullMethodName  = "/virsh.SlaveVirshService/UpdateVMCPUXml"
	SlaveVirshService_CreateVm_FullMethodName        = "/virsh.SlaveVirshService/CreateVm"
	SlaveVirshService_CreateLiveVM_FullMethodName    = "/virsh.SlaveVirshService/CreateLiveVM"
	SlaveVirshService_MigrateVM_FullMethodName       = "/virsh.SlaveVirshService/MigrateVM"
	SlaveVirshService_ShutdownVM_FullMethodName      = "/virsh.SlaveVirshService/ShutdownVM"
	SlaveVirshService_ForceShutdownVM_FullMethodName = "/virsh.SlaveVirshService/ForceShutdownVM"
	SlaveVirshService_StartVM_FullMethodName         = "/virsh.SlaveVirshService/StartVM"
	SlaveVirshService_RemoveVM_FullMethodName        = "/virsh.SlaveVirshService/RemoveVM"
	SlaveVirshService_RestartVM_FullMethodName       = "/virsh.SlaveVirshService/RestartVM"
	SlaveVirshService_PauseVM_FullMethodName         = "/virsh.SlaveVirshService/PauseVM"
	SlaveVirshService_ResumeVM_FullMethodName        = "/virsh.SlaveVirshService/ResumeVM"
	SlaveVirshService_GetAllVms_FullMethodName       = "/virsh.SlaveVirshService/GetAllVms"
	SlaveVirshService_GetVmByName_FullMethodName     = "/virsh.SlaveVirshService/GetVmByName"
	SlaveVirshService_RemoveIsoFromVm_FullMethodName = "/virsh.SlaveVirshService/RemoveIsoFromVm"
	SlaveVirshService_EditVmResources_FullMethodName = "/virsh.SlaveVirshService/EditVmResources"
)

// SlaveVirshServiceClient is the client API for SlaveVirshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlaveVirshServiceClient interface {
	GetCpuFeatures(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCpuFeaturesResponse, error)
	GetCPUXML(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CPUXMLResponse, error)
	GetVMCPUXml(ctx context.Context, in *GetVmByNameRequest, opts ...grpc.CallOption) (*CPUXMLResponse, error)
	UpdateVMCPUXml(ctx context.Context, in *UpdateVMCPUXmlRequest, opts ...grpc.CallOption) (*OkResponse, error)
	CreateVm(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (*OkResponse, error)
	CreateLiveVM(ctx context.Context, in *CreateVmLiveRequest, opts ...grpc.CallOption) (*OkResponse, error)
	MigrateVM(ctx context.Context, in *MigrateVmRequest, opts ...grpc.CallOption) (*OkResponse, error)
	ShutdownVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
	ForceShutdownVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
	StartVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
	RemoveVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
	RestartVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
	PauseVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
	ResumeVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
	GetAllVms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllVmsResponse, error)
	GetVmByName(ctx context.Context, in *GetVmByNameRequest, opts ...grpc.CallOption) (*Vm, error)
	RemoveIsoFromVm(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
	// only sees machine name, cpuCount and memoryMB
	// cpuCount and memoryMB are the new values to set
	EditVmResources(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error)
}

type slaveVirshServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSlaveVirshServiceClient(cc grpc.ClientConnInterface) SlaveVirshServiceClient {
	return &slaveVirshServiceClient{cc}
}

func (c *slaveVirshServiceClient) GetCpuFeatures(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCpuFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCpuFeaturesResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_GetCpuFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) GetCPUXML(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CPUXMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CPUXMLResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_GetCPUXML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) GetVMCPUXml(ctx context.Context, in *GetVmByNameRequest, opts ...grpc.CallOption) (*CPUXMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CPUXMLResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_GetVMCPUXml_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) UpdateVMCPUXml(ctx context.Context, in *UpdateVMCPUXmlRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_UpdateVMCPUXml_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) CreateVm(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_CreateVm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) CreateLiveVM(ctx context.Context, in *CreateVmLiveRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_CreateLiveVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) MigrateVM(ctx context.Context, in *MigrateVmRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_MigrateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) ShutdownVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_ShutdownVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) ForceShutdownVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_ForceShutdownVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) StartVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_StartVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) RemoveVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_RemoveVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) RestartVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_RestartVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) PauseVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_PauseVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) ResumeVM(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_ResumeVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) GetAllVms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllVmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllVmsResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_GetAllVms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) GetVmByName(ctx context.Context, in *GetVmByNameRequest, opts ...grpc.CallOption) (*Vm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vm)
	err := c.cc.Invoke(ctx, SlaveVirshService_GetVmByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) RemoveIsoFromVm(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_RemoveIsoFromVm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveVirshServiceClient) EditVmResources(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*OkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_EditVmResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaveVirshServiceServer is the server API for SlaveVirshService service.
// All implementations must embed UnimplementedSlaveVirshServiceServer
// for forward compatibility
type SlaveVirshServiceServer interface {
	GetCpuFeatures(context.Context, *Empty) (*GetCpuFeaturesResponse, error)
	GetCPUXML(context.Context, *Empty) (*CPUXMLResponse, error)
	GetVMCPUXml(context.Context, *GetVmByNameRequest) (*CPUXMLResponse, error)
	UpdateVMCPUXml(context.Context, *UpdateVMCPUXmlRequest) (*OkResponse, error)
	CreateVm(context.Context, *CreateVmRequest) (*OkResponse, error)
	CreateLiveVM(context.Context, *CreateVmLiveRequest) (*OkResponse, error)
	MigrateVM(context.Context, *MigrateVmRequest) (*OkResponse, error)
	ShutdownVM(context.Context, *Vm) (*OkResponse, error)
	ForceShutdownVM(context.Context, *Vm) (*OkResponse, error)
	StartVM(context.Context, *Vm) (*OkResponse, error)
	RemoveVM(context.Context, *Vm) (*OkResponse, error)
	RestartVM(context.Context, *Vm) (*OkResponse, error)
	PauseVM(context.Context, *Vm) (*OkResponse, error)
	ResumeVM(context.Context, *Vm) (*OkResponse, error)
	GetAllVms(context.Context, *Empty) (*GetAllVmsResponse, error)
	GetVmByName(context.Context, *GetVmByNameRequest) (*Vm, error)
	RemoveIsoFromVm(context.Context, *Vm) (*OkResponse, error)
	// only sees machine name, cpuCount and memoryMB
	// cpuCount and memoryMB are the new values to set
	EditVmResources(context.Context, *Vm) (*OkResponse, error)
	mustEmbedUnimplementedSlaveVirshServiceServer()
}

// UnimplementedSlaveVirshServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSlaveVirshServiceServer struct {
}

func (UnimplementedSlaveVirshServiceServer) GetCpuFeatures(context.Context, *Empty) (*GetCpuFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCpuFeatures not implemented")
}
func (UnimplementedSlaveVirshServiceServer) GetCPUXML(context.Context, *Empty) (*CPUXMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCPUXML not implemented")
}
func (UnimplementedSlaveVirshServiceServer) GetVMCPUXml(context.Context, *GetVmByNameRequest) (*CPUXMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMCPUXml not implemented")
}
func (UnimplementedSlaveVirshServiceServer) UpdateVMCPUXml(context.Context, *UpdateVMCPUXmlRequest) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMCPUXml not implemented")
}
func (UnimplementedSlaveVirshServiceServer) CreateVm(context.Context, *CreateVmRequest) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVm not implemented")
}
func (UnimplementedSlaveVirshServiceServer) CreateLiveVM(context.Context, *CreateVmLiveRequest) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiveVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) MigrateVM(context.Context, *MigrateVmRequest) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) ShutdownVM(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) ForceShutdownVM(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceShutdownVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) StartVM(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) RemoveVM(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) RestartVM(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) PauseVM(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) ResumeVM(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeVM not implemented")
}
func (UnimplementedSlaveVirshServiceServer) GetAllVms(context.Context, *Empty) (*GetAllVmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVms not implemented")
}
func (UnimplementedSlaveVirshServiceServer) GetVmByName(context.Context, *GetVmByNameRequest) (*Vm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVmByName not implemented")
}
func (UnimplementedSlaveVirshServiceServer) RemoveIsoFromVm(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIsoFromVm not implemented")
}
func (UnimplementedSlaveVirshServiceServer) EditVmResources(context.Context, *Vm) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditVmResources not implemented")
}
func (UnimplementedSlaveVirshServiceServer) mustEmbedUnimplementedSlaveVirshServiceServer() {}

// UnsafeSlaveVirshServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlaveVirshServiceServer will
// result in compilation errors.
type UnsafeSlaveVirshServiceServer interface {
	mustEmbedUnimplementedSlaveVirshServiceServer()
}

func RegisterSlaveVirshServiceServer(s grpc.ServiceRegistrar, srv SlaveVirshServiceServer) {
	s.RegisterService(&SlaveVirshService_ServiceDesc, srv)
}

func _SlaveVirshService_GetCpuFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).GetCpuFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_GetCpuFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).GetCpuFeatures(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_GetCPUXML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).GetCPUXML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_GetCPUXML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).GetCPUXML(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_GetVMCPUXml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVmByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).GetVMCPUXml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_GetVMCPUXml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).GetVMCPUXml(ctx, req.(*GetVmByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_UpdateVMCPUXml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMCPUXmlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).UpdateVMCPUXml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_UpdateVMCPUXml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).UpdateVMCPUXml(ctx, req.(*UpdateVMCPUXmlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_CreateVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).CreateVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_CreateVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).CreateVm(ctx, req.(*CreateVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_CreateLiveVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVmLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).CreateLiveVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_CreateLiveVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).CreateLiveVM(ctx, req.(*CreateVmLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_MigrateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).MigrateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_MigrateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).MigrateVM(ctx, req.(*MigrateVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_ShutdownVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).ShutdownVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_ShutdownVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).ShutdownVM(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_ForceShutdownVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).ForceShutdownVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_ForceShutdownVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).ForceShutdownVM(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_StartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).StartVM(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_RemoveVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).RemoveVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_RemoveVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).RemoveVM(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_RestartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).RestartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_RestartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).RestartVM(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_PauseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).PauseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_PauseVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).PauseVM(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_ResumeVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).ResumeVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_ResumeVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).ResumeVM(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_GetAllVms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).GetAllVms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_GetAllVms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).GetAllVms(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_GetVmByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVmByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).GetVmByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_GetVmByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).GetVmByName(ctx, req.(*GetVmByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_RemoveIsoFromVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).RemoveIsoFromVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_RemoveIsoFromVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).RemoveIsoFromVm(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveVirshService_EditVmResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).EditVmResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_EditVmResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).EditVmResources(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

// SlaveVirshService_ServiceDesc is the grpc.ServiceDesc for SlaveVirshService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlaveVirshService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "virsh.SlaveVirshService",
	HandlerType: (*SlaveVirshServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCpuFeatures",
			Handler:    _SlaveVirshService_GetCpuFeatures_Handler,
		},
		{
			MethodName: "GetCPUXML",
			Handler:    _SlaveVirshService_GetCPUXML_Handler,
		},
		{
			MethodName: "GetVMCPUXml",
			Handler:    _SlaveVirshService_GetVMCPUXml_Handler,
		},
		{
			MethodName: "UpdateVMCPUXml",
			Handler:    _SlaveVirshService_UpdateVMCPUXml_Handler,
		},
		{
			MethodName: "CreateVm",
			Handler:    _SlaveVirshService_CreateVm_Handler,
		},
		{
			MethodName: "CreateLiveVM",
			Handler:    _SlaveVirshService_CreateLiveVM_Handler,
		},
		{
			MethodName: "MigrateVM",
			Handler:    _SlaveVirshService_MigrateVM_Handler,
		},
		{
			MethodName: "ShutdownVM",
			Handler:    _SlaveVirshService_ShutdownVM_Handler,
		},
		{
			MethodName: "ForceShutdownVM",
			Handler:    _SlaveVirshService_ForceShutdownVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _SlaveVirshService_StartVM_Handler,
		},
		{
			MethodName: "RemoveVM",
			Handler:    _SlaveVirshService_RemoveVM_Handler,
		},
		{
			MethodName: "RestartVM",
			Handler:    _SlaveVirshService_RestartVM_Handler,
		},
		{
			MethodName: "PauseVM",
			Handler:    _SlaveVirshService_PauseVM_Handler,
		},
		{
			MethodName: "ResumeVM",
			Handler:    _SlaveVirshService_ResumeVM_Handler,
		},
		{
			MethodName: "GetAllVms",
			Handler:    _SlaveVirshService_GetAllVms_Handler,
		},
		{
			MethodName: "GetVmByName",
			Handler:    _SlaveVirshService_GetVmByName_Handler,
		},
		{
			MethodName: "RemoveIsoFromVm",
			Handler:    _SlaveVirshService_RemoveIsoFromVm_Handler,
		},
		{
			MethodName: "EditVmResources",
			Handler:    _SlaveVirshService_EditVmResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virsh.proto",
}
