// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.19.6
// source: virsh.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VmState int32

const (
	VmState_UNKNOWN     VmState = 0
	VmState_RUNNING     VmState = 1
	VmState_BLOCKED     VmState = 2
	VmState_PAUSED      VmState = 3
	VmState_SHUTDOWN    VmState = 4
	VmState_SHUTOFF     VmState = 5
	VmState_CRASHED     VmState = 6
	VmState_PMSUSPENDED VmState = 7
	VmState_NOSTATE     VmState = 8
)

// Enum value maps for VmState.
var (
	VmState_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNNING",
		2: "BLOCKED",
		3: "PAUSED",
		4: "SHUTDOWN",
		5: "SHUTOFF",
		6: "CRASHED",
		7: "PMSUSPENDED",
		8: "NOSTATE",
	}
	VmState_value = map[string]int32{
		"UNKNOWN":     0,
		"RUNNING":     1,
		"BLOCKED":     2,
		"PAUSED":      3,
		"SHUTDOWN":    4,
		"SHUTOFF":     5,
		"CRASHED":     6,
		"PMSUSPENDED": 7,
		"NOSTATE":     8,
	}
)

func (x VmState) Enum() *VmState {
	p := new(VmState)
	*p = x
	return p
}

func (x VmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmState) Descriptor() protoreflect.EnumDescriptor {
	return file_virsh_proto_enumTypes[0].Descriptor()
}

func (VmState) Type() protoreflect.EnumType {
	return &file_virsh_proto_enumTypes[0]
}

func (x VmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VmState.Descriptor instead.
func (VmState) EnumDescriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{0}
}

// get cpu features
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_virsh_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{0}
}

type GetCpuFeaturesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Features      []string               `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCpuFeaturesResponse) Reset() {
	*x = GetCpuFeaturesResponse{}
	mi := &file_virsh_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCpuFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCpuFeaturesResponse) ProtoMessage() {}

func (x *GetCpuFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCpuFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetCpuFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{1}
}

func (x *GetCpuFeaturesResponse) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

type CreateVmRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Memory        int32                  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Vcpu          int32                  `protobuf:"varint,3,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	DiskFolder    string                 `protobuf:"bytes,4,opt,name=disk_folder,json=diskFolder,proto3" json:"disk_folder,omitempty"`
	DiskPath      string                 `protobuf:"bytes,5,opt,name=disk_path,json=diskPath,proto3" json:"disk_path,omitempty"`
	DiskSizeGB    int32                  `protobuf:"varint,6,opt,name=disk_sizeGB,json=diskSizeGB,proto3" json:"disk_sizeGB,omitempty"`
	IsoPath       string                 `protobuf:"bytes,7,opt,name=iso_path,json=isoPath,proto3" json:"iso_path,omitempty"`
	Network       string                 `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	VncPassword   string                 `protobuf:"bytes,9,opt,name=vnc_password,json=vncPassword,proto3" json:"vnc_password,omitempty"`
	CpuXml        string                 `protobuf:"bytes,10,opt,name=cpuXml,proto3" json:"cpuXml,omitempty"`
	Raw           bool                   `protobuf:"varint,11,opt,name=raw,proto3" json:"raw,omitempty"`
	AutoStart     bool                   `protobuf:"varint,12,opt,name=autoStart,proto3" json:"autoStart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVmRequest) Reset() {
	*x = CreateVmRequest{}
	mi := &file_virsh_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmRequest) ProtoMessage() {}

func (x *CreateVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmRequest.ProtoReflect.Descriptor instead.
func (*CreateVmRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{2}
}

func (x *CreateVmRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVmRequest) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CreateVmRequest) GetVcpu() int32 {
	if x != nil {
		return x.Vcpu
	}
	return 0
}

func (x *CreateVmRequest) GetDiskFolder() string {
	if x != nil {
		return x.DiskFolder
	}
	return ""
}

func (x *CreateVmRequest) GetDiskPath() string {
	if x != nil {
		return x.DiskPath
	}
	return ""
}

func (x *CreateVmRequest) GetDiskSizeGB() int32 {
	if x != nil {
		return x.DiskSizeGB
	}
	return 0
}

func (x *CreateVmRequest) GetIsoPath() string {
	if x != nil {
		return x.IsoPath
	}
	return ""
}

func (x *CreateVmRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CreateVmRequest) GetVncPassword() string {
	if x != nil {
		return x.VncPassword
	}
	return ""
}

func (x *CreateVmRequest) GetCpuXml() string {
	if x != nil {
		return x.CpuXml
	}
	return ""
}

func (x *CreateVmRequest) GetRaw() bool {
	if x != nil {
		return x.Raw
	}
	return false
}

func (x *CreateVmRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

type OkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OkResponse) Reset() {
	*x = OkResponse{}
	mi := &file_virsh_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkResponse) ProtoMessage() {}

func (x *OkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkResponse.ProtoReflect.Descriptor instead.
func (*OkResponse) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{3}
}

func (x *OkResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *OkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Vm struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MachineName          string                 `protobuf:"bytes,1,opt,name=machineName,proto3" json:"machineName,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State                VmState                `protobuf:"varint,3,opt,name=state,proto3,enum=virsh.VmState" json:"state,omitempty"`
	NovncPort            string                 `protobuf:"bytes,4,opt,name=novncPort,proto3" json:"novncPort,omitempty"`
	CpuCount             int32                  `protobuf:"varint,5,opt,name=cpuCount,proto3" json:"cpuCount,omitempty"`
	MemoryMB             int32                  `protobuf:"varint,6,opt,name=memoryMB,proto3" json:"memoryMB,omitempty"`
	CurrentCpuUsage      int32                  `protobuf:"varint,7,opt,name=currentCpuUsage,proto3" json:"currentCpuUsage,omitempty"`
	CurrentMemoryUsageMB int32                  `protobuf:"varint,8,opt,name=currentMemoryUsageMB,proto3" json:"currentMemoryUsageMB,omitempty"`
	DiskSizeGB           int32                  `protobuf:"varint,9,opt,name=diskSizeGB,proto3" json:"diskSizeGB,omitempty"`
	DiskPath             string                 `protobuf:"bytes,10,opt,name=diskPath,proto3" json:"diskPath,omitempty"`
	Ip                   []string               `protobuf:"bytes,12,rep,name=ip,proto3" json:"ip,omitempty"`
	AutoStart            bool                   `protobuf:"varint,13,opt,name=autoStart,proto3" json:"autoStart,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Vm) Reset() {
	*x = Vm{}
	mi := &file_virsh_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vm) ProtoMessage() {}

func (x *Vm) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vm.ProtoReflect.Descriptor instead.
func (*Vm) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{4}
}

func (x *Vm) GetMachineName() string {
	if x != nil {
		return x.MachineName
	}
	return ""
}

func (x *Vm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vm) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_UNKNOWN
}

func (x *Vm) GetNovncPort() string {
	if x != nil {
		return x.NovncPort
	}
	return ""
}

func (x *Vm) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *Vm) GetMemoryMB() int32 {
	if x != nil {
		return x.MemoryMB
	}
	return 0
}

func (x *Vm) GetCurrentCpuUsage() int32 {
	if x != nil {
		return x.CurrentCpuUsage
	}
	return 0
}

func (x *Vm) GetCurrentMemoryUsageMB() int32 {
	if x != nil {
		return x.CurrentMemoryUsageMB
	}
	return 0
}

func (x *Vm) GetDiskSizeGB() int32 {
	if x != nil {
		return x.DiskSizeGB
	}
	return 0
}

func (x *Vm) GetDiskPath() string {
	if x != nil {
		return x.DiskPath
	}
	return ""
}

func (x *Vm) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Vm) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

type GetVmByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVmByNameRequest) Reset() {
	*x = GetVmByNameRequest{}
	mi := &file_virsh_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVmByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVmByNameRequest) ProtoMessage() {}

func (x *GetVmByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVmByNameRequest.ProtoReflect.Descriptor instead.
func (*GetVmByNameRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{5}
}

func (x *GetVmByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetAllVmsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vms           []*Vm                  `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
	Warnings      []string               `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllVmsResponse) Reset() {
	*x = GetAllVmsResponse{}
	mi := &file_virsh_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllVmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVmsResponse) ProtoMessage() {}

func (x *GetAllVmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVmsResponse.ProtoReflect.Descriptor instead.
func (*GetAllVmsResponse) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllVmsResponse) GetVms() []*Vm {
	if x != nil {
		return x.Vms
	}
	return nil
}

func (x *GetAllVmsResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type MigrateVmRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SlaveIp        string                 `protobuf:"bytes,3,opt,name=slaveIp,proto3" json:"slaveIp,omitempty"`
	Live           bool                   `protobuf:"varint,4,opt,name=live,proto3" json:"live,omitempty"`
	TimeoutSeconds int32                  `protobuf:"varint,5,opt,name=timeoutSeconds,proto3" json:"timeoutSeconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MigrateVmRequest) Reset() {
	*x = MigrateVmRequest{}
	mi := &file_virsh_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateVmRequest) ProtoMessage() {}

func (x *MigrateVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateVmRequest.ProtoReflect.Descriptor instead.
func (*MigrateVmRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{7}
}

func (x *MigrateVmRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MigrateVmRequest) GetSlaveIp() string {
	if x != nil {
		return x.SlaveIp
	}
	return ""
}

func (x *MigrateVmRequest) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *MigrateVmRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type CPUXMLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpuXML        string                 `protobuf:"bytes,1,opt,name=cpuXML,proto3" json:"cpuXML,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPUXMLResponse) Reset() {
	*x = CPUXMLResponse{}
	mi := &file_virsh_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUXMLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUXMLResponse) ProtoMessage() {}

func (x *CPUXMLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUXMLResponse.ProtoReflect.Descriptor instead.
func (*CPUXMLResponse) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{8}
}

func (x *CPUXMLResponse) GetCpuXML() string {
	if x != nil {
		return x.CpuXML
	}
	return ""
}

type UpdateVMCPUXmlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CpuXML        string                 `protobuf:"bytes,2,opt,name=cpuXML,proto3" json:"cpuXML,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVMCPUXmlRequest) Reset() {
	*x = UpdateVMCPUXmlRequest{}
	mi := &file_virsh_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVMCPUXmlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMCPUXmlRequest) ProtoMessage() {}

func (x *UpdateVMCPUXmlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMCPUXmlRequest.ProtoReflect.Descriptor instead.
func (*UpdateVMCPUXmlRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateVMCPUXmlRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVMCPUXmlRequest) GetCpuXML() string {
	if x != nil {
		return x.CpuXML
	}
	return ""
}

type ColdMigrationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmName        string                 `protobuf:"bytes,1,opt,name=vm_name,json=vmName,proto3" json:"vm_name,omitempty"`
	Memory        int32                  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	VCpus         int32                  `protobuf:"varint,3,opt,name=v_cpus,json=vCpus,proto3" json:"v_cpus,omitempty"`
	Network       string                 `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	VncPassword   string                 `protobuf:"bytes,5,opt,name=vnc_password,json=vncPassword,proto3" json:"vnc_password,omitempty"`
	CpuXML        string                 `protobuf:"bytes,6,opt,name=cpuXML,proto3" json:"cpuXML,omitempty"`
	DiskPath      string                 `protobuf:"bytes,7,opt,name=disk_path,json=diskPath,proto3" json:"disk_path,omitempty"`
	Live          bool                   `protobuf:"varint,8,opt,name=live,proto3" json:"live,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColdMigrationRequest) Reset() {
	*x = ColdMigrationRequest{}
	mi := &file_virsh_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColdMigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColdMigrationRequest) ProtoMessage() {}

func (x *ColdMigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColdMigrationRequest.ProtoReflect.Descriptor instead.
func (*ColdMigrationRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{10}
}

func (x *ColdMigrationRequest) GetVmName() string {
	if x != nil {
		return x.VmName
	}
	return ""
}

func (x *ColdMigrationRequest) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ColdMigrationRequest) GetVCpus() int32 {
	if x != nil {
		return x.VCpus
	}
	return 0
}

func (x *ColdMigrationRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ColdMigrationRequest) GetVncPassword() string {
	if x != nil {
		return x.VncPassword
	}
	return ""
}

func (x *ColdMigrationRequest) GetCpuXML() string {
	if x != nil {
		return x.CpuXML
	}
	return ""
}

func (x *ColdMigrationRequest) GetDiskPath() string {
	if x != nil {
		return x.DiskPath
	}
	return ""
}

func (x *ColdMigrationRequest) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

type AutoStartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VmName        string                 `protobuf:"bytes,1,opt,name=vmName,proto3" json:"vmName,omitempty"`
	AutoStart     bool                   `protobuf:"varint,2,opt,name=autoStart,proto3" json:"autoStart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoStartRequest) Reset() {
	*x = AutoStartRequest{}
	mi := &file_virsh_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoStartRequest) ProtoMessage() {}

func (x *AutoStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoStartRequest.ProtoReflect.Descriptor instead.
func (*AutoStartRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{11}
}

func (x *AutoStartRequest) GetVmName() string {
	if x != nil {
		return x.VmName
	}
	return ""
}

func (x *AutoStartRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

var File_virsh_proto protoreflect.FileDescriptor

const file_virsh_proto_rawDesc = "" +
	"\n" +
	"\vvirsh.proto\x12\x05virsh\"\a\n" +
	"\x05Empty\"4\n" +
	"\x16GetCpuFeaturesResponse\x12\x1a\n" +
	"\bfeatures\x18\x01 \x03(\tR\bfeatures\"\xd0\x02\n" +
	"\x0fCreateVmRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06memory\x18\x02 \x01(\x05R\x06memory\x12\x12\n" +
	"\x04vcpu\x18\x03 \x01(\x05R\x04vcpu\x12\x1f\n" +
	"\vdisk_folder\x18\x04 \x01(\tR\n" +
	"diskFolder\x12\x1b\n" +
	"\tdisk_path\x18\x05 \x01(\tR\bdiskPath\x12\x1f\n" +
	"\vdisk_sizeGB\x18\x06 \x01(\x05R\n" +
	"diskSizeGB\x12\x19\n" +
	"\biso_path\x18\a \x01(\tR\aisoPath\x12\x18\n" +
	"\anetwork\x18\b \x01(\tR\anetwork\x12!\n" +
	"\fvnc_password\x18\t \x01(\tR\vvncPassword\x12\x16\n" +
	"\x06cpuXml\x18\n" +
	" \x01(\tR\x06cpuXml\x12\x10\n" +
	"\x03raw\x18\v \x01(\bR\x03raw\x12\x1c\n" +
	"\tautoStart\x18\f \x01(\bR\tautoStart\"6\n" +
	"\n" +
	"OkResponse\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xfe\x02\n" +
	"\x02Vm\x12 \n" +
	"\vmachineName\x18\x01 \x01(\tR\vmachineName\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12$\n" +
	"\x05state\x18\x03 \x01(\x0e2\x0e.virsh.VmStateR\x05state\x12\x1c\n" +
	"\tnovncPort\x18\x04 \x01(\tR\tnovncPort\x12\x1a\n" +
	"\bcpuCount\x18\x05 \x01(\x05R\bcpuCount\x12\x1a\n" +
	"\bmemoryMB\x18\x06 \x01(\x05R\bmemoryMB\x12(\n" +
	"\x0fcurrentCpuUsage\x18\a \x01(\x05R\x0fcurrentCpuUsage\x122\n" +
	"\x14currentMemoryUsageMB\x18\b \x01(\x05R\x14currentMemoryUsageMB\x12\x1e\n" +
	"\n" +
	"diskSizeGB\x18\t \x01(\x05R\n" +
	"diskSizeGB\x12\x1a\n" +
	"\bdiskPath\x18\n" +
	" \x01(\tR\bdiskPath\x12\x0e\n" +
	"\x02ip\x18\f \x03(\tR\x02ip\x12\x1c\n" +
	"\tautoStart\x18\r \x01(\bR\tautoStart\"(\n" +
	"\x12GetVmByNameRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"L\n" +
	"\x11GetAllVmsResponse\x12\x1b\n" +
	"\x03vms\x18\x01 \x03(\v2\t.virsh.VmR\x03vms\x12\x1a\n" +
	"\bwarnings\x18\x02 \x03(\tR\bwarnings\"|\n" +
	"\x10MigrateVmRequest\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\aslaveIp\x18\x03 \x01(\tR\aslaveIp\x12\x12\n" +
	"\x04live\x18\x04 \x01(\bR\x04live\x12&\n" +
	"\x0etimeoutSeconds\x18\x05 \x01(\x05R\x0etimeoutSeconds\"(\n" +
	"\x0eCPUXMLResponse\x12\x16\n" +
	"\x06cpuXML\x18\x01 \x01(\tR\x06cpuXML\"C\n" +
	"\x15UpdateVMCPUXmlRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06cpuXML\x18\x02 \x01(\tR\x06cpuXML\"\xe4\x01\n" +
	"\x14ColdMigrationRequest\x12\x17\n" +
	"\avm_name\x18\x01 \x01(\tR\x06vmName\x12\x16\n" +
	"\x06memory\x18\x02 \x01(\x05R\x06memory\x12\x15\n" +
	"\x06v_cpus\x18\x03 \x01(\x05R\x05vCpus\x12\x18\n" +
	"\anetwork\x18\x04 \x01(\tR\anetwork\x12!\n" +
	"\fvnc_password\x18\x05 \x01(\tR\vvncPassword\x12\x16\n" +
	"\x06cpuXML\x18\x06 \x01(\tR\x06cpuXML\x12\x1b\n" +
	"\tdisk_path\x18\a \x01(\tR\bdiskPath\x12\x12\n" +
	"\x04live\x18\b \x01(\bR\x04live\"H\n" +
	"\x10AutoStartRequest\x12\x16\n" +
	"\x06vmName\x18\x01 \x01(\tR\x06vmName\x12\x1c\n" +
	"\tautoStart\x18\x02 \x01(\bR\tautoStart*\x82\x01\n" +
	"\aVmState\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\v\n" +
	"\aBLOCKED\x10\x02\x12\n" +
	"\n" +
	"\x06PAUSED\x10\x03\x12\f\n" +
	"\bSHUTDOWN\x10\x04\x12\v\n" +
	"\aSHUTOFF\x10\x05\x12\v\n" +
	"\aCRASHED\x10\x06\x12\x0f\n" +
	"\vPMSUSPENDED\x10\a\x12\v\n" +
	"\aNOSTATE\x10\b2\xec\a\n" +
	"\x11SlaveVirshService\x12=\n" +
	"\x0eGetCpuFeatures\x12\f.virsh.Empty\x1a\x1d.virsh.GetCpuFeaturesResponse\x120\n" +
	"\tGetCPUXML\x12\f.virsh.Empty\x1a\x15.virsh.CPUXMLResponse\x12?\n" +
	"\vGetVMCPUXml\x12\x19.virsh.GetVmByNameRequest\x1a\x15.virsh.CPUXMLResponse\x12A\n" +
	"\x0eUpdateVMCPUXml\x12\x1c.virsh.UpdateVMCPUXmlRequest\x1a\x11.virsh.OkResponse\x125\n" +
	"\bCreateVm\x12\x16.virsh.CreateVmRequest\x1a\x11.virsh.OkResponse\x127\n" +
	"\tMigrateVM\x12\x17.virsh.MigrateVmRequest\x1a\x11.virsh.OkResponse\x12*\n" +
	"\n" +
	"ShutdownVM\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x12/\n" +
	"\x0fForceShutdownVM\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x12'\n" +
	"\aStartVM\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x12(\n" +
	"\bRemoveVM\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x12)\n" +
	"\tRestartVM\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x12'\n" +
	"\aPauseVM\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x12(\n" +
	"\bResumeVM\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x123\n" +
	"\tGetAllVms\x12\f.virsh.Empty\x1a\x18.virsh.GetAllVmsResponse\x123\n" +
	"\vGetVmByName\x12\x19.virsh.GetVmByNameRequest\x1a\t.virsh.Vm\x12/\n" +
	"\x0fRemoveIsoFromVm\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x12/\n" +
	"\x0fEditVmResources\x12\t.virsh.Vm\x1a\x11.virsh.OkResponse\x12?\n" +
	"\rColdMigrateVm\x12\x1b.virsh.ColdMigrationRequest\x1a\x11.virsh.OkResponse\x127\n" +
	"\tAutoStart\x12\x17.virsh.AutoStartRequest\x1a\x11.virsh.OkResponseB3Z1github.com/Maruqes/512SvMan/api/proto/virsh;protob\x06proto3"

var (
	file_virsh_proto_rawDescOnce sync.Once
	file_virsh_proto_rawDescData []byte
)

func file_virsh_proto_rawDescGZIP() []byte {
	file_virsh_proto_rawDescOnce.Do(func() {
		file_virsh_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_virsh_proto_rawDesc), len(file_virsh_proto_rawDesc)))
	})
	return file_virsh_proto_rawDescData
}

var file_virsh_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_virsh_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_virsh_proto_goTypes = []any{
	(VmState)(0),                   // 0: virsh.VmState
	(*Empty)(nil),                  // 1: virsh.Empty
	(*GetCpuFeaturesResponse)(nil), // 2: virsh.GetCpuFeaturesResponse
	(*CreateVmRequest)(nil),        // 3: virsh.CreateVmRequest
	(*OkResponse)(nil),             // 4: virsh.OkResponse
	(*Vm)(nil),                     // 5: virsh.Vm
	(*GetVmByNameRequest)(nil),     // 6: virsh.GetVmByNameRequest
	(*GetAllVmsResponse)(nil),      // 7: virsh.GetAllVmsResponse
	(*MigrateVmRequest)(nil),       // 8: virsh.MigrateVmRequest
	(*CPUXMLResponse)(nil),         // 9: virsh.CPUXMLResponse
	(*UpdateVMCPUXmlRequest)(nil),  // 10: virsh.UpdateVMCPUXmlRequest
	(*ColdMigrationRequest)(nil),   // 11: virsh.ColdMigrationRequest
	(*AutoStartRequest)(nil),       // 12: virsh.AutoStartRequest
}
var file_virsh_proto_depIdxs = []int32{
	0,  // 0: virsh.Vm.state:type_name -> virsh.VmState
	5,  // 1: virsh.GetAllVmsResponse.vms:type_name -> virsh.Vm
	1,  // 2: virsh.SlaveVirshService.GetCpuFeatures:input_type -> virsh.Empty
	1,  // 3: virsh.SlaveVirshService.GetCPUXML:input_type -> virsh.Empty
	6,  // 4: virsh.SlaveVirshService.GetVMCPUXml:input_type -> virsh.GetVmByNameRequest
	10, // 5: virsh.SlaveVirshService.UpdateVMCPUXml:input_type -> virsh.UpdateVMCPUXmlRequest
	3,  // 6: virsh.SlaveVirshService.CreateVm:input_type -> virsh.CreateVmRequest
	8,  // 7: virsh.SlaveVirshService.MigrateVM:input_type -> virsh.MigrateVmRequest
	5,  // 8: virsh.SlaveVirshService.ShutdownVM:input_type -> virsh.Vm
	5,  // 9: virsh.SlaveVirshService.ForceShutdownVM:input_type -> virsh.Vm
	5,  // 10: virsh.SlaveVirshService.StartVM:input_type -> virsh.Vm
	5,  // 11: virsh.SlaveVirshService.RemoveVM:input_type -> virsh.Vm
	5,  // 12: virsh.SlaveVirshService.RestartVM:input_type -> virsh.Vm
	5,  // 13: virsh.SlaveVirshService.PauseVM:input_type -> virsh.Vm
	5,  // 14: virsh.SlaveVirshService.ResumeVM:input_type -> virsh.Vm
	1,  // 15: virsh.SlaveVirshService.GetAllVms:input_type -> virsh.Empty
	6,  // 16: virsh.SlaveVirshService.GetVmByName:input_type -> virsh.GetVmByNameRequest
	5,  // 17: virsh.SlaveVirshService.RemoveIsoFromVm:input_type -> virsh.Vm
	5,  // 18: virsh.SlaveVirshService.EditVmResources:input_type -> virsh.Vm
	11, // 19: virsh.SlaveVirshService.ColdMigrateVm:input_type -> virsh.ColdMigrationRequest
	12, // 20: virsh.SlaveVirshService.AutoStart:input_type -> virsh.AutoStartRequest
	2,  // 21: virsh.SlaveVirshService.GetCpuFeatures:output_type -> virsh.GetCpuFeaturesResponse
	9,  // 22: virsh.SlaveVirshService.GetCPUXML:output_type -> virsh.CPUXMLResponse
	9,  // 23: virsh.SlaveVirshService.GetVMCPUXml:output_type -> virsh.CPUXMLResponse
	4,  // 24: virsh.SlaveVirshService.UpdateVMCPUXml:output_type -> virsh.OkResponse
	4,  // 25: virsh.SlaveVirshService.CreateVm:output_type -> virsh.OkResponse
	4,  // 26: virsh.SlaveVirshService.MigrateVM:output_type -> virsh.OkResponse
	4,  // 27: virsh.SlaveVirshService.ShutdownVM:output_type -> virsh.OkResponse
	4,  // 28: virsh.SlaveVirshService.ForceShutdownVM:output_type -> virsh.OkResponse
	4,  // 29: virsh.SlaveVirshService.StartVM:output_type -> virsh.OkResponse
	4,  // 30: virsh.SlaveVirshService.RemoveVM:output_type -> virsh.OkResponse
	4,  // 31: virsh.SlaveVirshService.RestartVM:output_type -> virsh.OkResponse
	4,  // 32: virsh.SlaveVirshService.PauseVM:output_type -> virsh.OkResponse
	4,  // 33: virsh.SlaveVirshService.ResumeVM:output_type -> virsh.OkResponse
	7,  // 34: virsh.SlaveVirshService.GetAllVms:output_type -> virsh.GetAllVmsResponse
	5,  // 35: virsh.SlaveVirshService.GetVmByName:output_type -> virsh.Vm
	4,  // 36: virsh.SlaveVirshService.RemoveIsoFromVm:output_type -> virsh.OkResponse
	4,  // 37: virsh.SlaveVirshService.EditVmResources:output_type -> virsh.OkResponse
	4,  // 38: virsh.SlaveVirshService.ColdMigrateVm:output_type -> virsh.OkResponse
	4,  // 39: virsh.SlaveVirshService.AutoStart:output_type -> virsh.OkResponse
	21, // [21:40] is the sub-list for method output_type
	2,  // [2:21] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_virsh_proto_init() }
func file_virsh_proto_init() {
	if File_virsh_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_virsh_proto_rawDesc), len(file_virsh_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_virsh_proto_goTypes,
		DependencyIndexes: file_virsh_proto_depIdxs,
		EnumInfos:         file_virsh_proto_enumTypes,
		MessageInfos:      file_virsh_proto_msgTypes,
	}.Build()
	File_virsh_proto = out.File
	file_virsh_proto_goTypes = nil
	file_virsh_proto_depIdxs = nil
}
