// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: virsh.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VmState int32

const (
	VmState_UNKNOWN     VmState = 0
	VmState_RUNNING     VmState = 1
	VmState_BLOCKED     VmState = 2
	VmState_PAUSED      VmState = 3
	VmState_SHUTDOWN    VmState = 4
	VmState_SHUTOFF     VmState = 5
	VmState_CRASHED     VmState = 6
	VmState_PMSUSPENDED VmState = 7
	VmState_NOSTATE     VmState = 8
)

// Enum value maps for VmState.
var (
	VmState_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNNING",
		2: "BLOCKED",
		3: "PAUSED",
		4: "SHUTDOWN",
		5: "SHUTOFF",
		6: "CRASHED",
		7: "PMSUSPENDED",
		8: "NOSTATE",
	}
	VmState_value = map[string]int32{
		"UNKNOWN":     0,
		"RUNNING":     1,
		"BLOCKED":     2,
		"PAUSED":      3,
		"SHUTDOWN":    4,
		"SHUTOFF":     5,
		"CRASHED":     6,
		"PMSUSPENDED": 7,
		"NOSTATE":     8,
	}
)

func (x VmState) Enum() *VmState {
	p := new(VmState)
	*p = x
	return p
}

func (x VmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmState) Descriptor() protoreflect.EnumDescriptor {
	return file_virsh_proto_enumTypes[0].Descriptor()
}

func (VmState) Type() protoreflect.EnumType {
	return &file_virsh_proto_enumTypes[0]
}

func (x VmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VmState.Descriptor instead.
func (VmState) EnumDescriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{0}
}

// get cpu features
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{0}
}

type GetCpuFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features []string `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *GetCpuFeaturesResponse) Reset() {
	*x = GetCpuFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCpuFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCpuFeaturesResponse) ProtoMessage() {}

func (x *GetCpuFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCpuFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetCpuFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{1}
}

func (x *GetCpuFeaturesResponse) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

type CreateVmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Memory      int32  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Vcpu        int32  `protobuf:"varint,3,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	DiskFolder  string `protobuf:"bytes,4,opt,name=disk_folder,json=diskFolder,proto3" json:"disk_folder,omitempty"`
	DiskPath    string `protobuf:"bytes,5,opt,name=disk_path,json=diskPath,proto3" json:"disk_path,omitempty"`
	DiskSizeGB  int32  `protobuf:"varint,6,opt,name=disk_sizeGB,json=diskSizeGB,proto3" json:"disk_sizeGB,omitempty"`
	IsoPath     string `protobuf:"bytes,7,opt,name=iso_path,json=isoPath,proto3" json:"iso_path,omitempty"`
	Network     string `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	VncPassword string `protobuf:"bytes,9,opt,name=vnc_password,json=vncPassword,proto3" json:"vnc_password,omitempty"`
}

func (x *CreateVmRequest) Reset() {
	*x = CreateVmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmRequest) ProtoMessage() {}

func (x *CreateVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmRequest.ProtoReflect.Descriptor instead.
func (*CreateVmRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{2}
}

func (x *CreateVmRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVmRequest) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CreateVmRequest) GetVcpu() int32 {
	if x != nil {
		return x.Vcpu
	}
	return 0
}

func (x *CreateVmRequest) GetDiskFolder() string {
	if x != nil {
		return x.DiskFolder
	}
	return ""
}

func (x *CreateVmRequest) GetDiskPath() string {
	if x != nil {
		return x.DiskPath
	}
	return ""
}

func (x *CreateVmRequest) GetDiskSizeGB() int32 {
	if x != nil {
		return x.DiskSizeGB
	}
	return 0
}

func (x *CreateVmRequest) GetIsoPath() string {
	if x != nil {
		return x.IsoPath
	}
	return ""
}

func (x *CreateVmRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CreateVmRequest) GetVncPassword() string {
	if x != nil {
		return x.VncPassword
	}
	return ""
}

type OkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OkResponse) Reset() {
	*x = OkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkResponse) ProtoMessage() {}

func (x *OkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkResponse.ProtoReflect.Descriptor instead.
func (*OkResponse) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{3}
}

func (x *OkResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *OkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Vm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineName          string   `protobuf:"bytes,1,opt,name=machineName,proto3" json:"machineName,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State                VmState  `protobuf:"varint,3,opt,name=state,proto3,enum=virsh.VmState" json:"state,omitempty"`
	NovncPort            string   `protobuf:"bytes,4,opt,name=novncPort,proto3" json:"novncPort,omitempty"`
	CpuCount             int32    `protobuf:"varint,5,opt,name=cpuCount,proto3" json:"cpuCount,omitempty"`
	MemoryMB             int32    `protobuf:"varint,6,opt,name=memoryMB,proto3" json:"memoryMB,omitempty"`
	CurrentCpuUsage      int32    `protobuf:"varint,7,opt,name=currentCpuUsage,proto3" json:"currentCpuUsage,omitempty"`
	CurrentMemoryUsageMB int32    `protobuf:"varint,8,opt,name=currentMemoryUsageMB,proto3" json:"currentMemoryUsageMB,omitempty"`
	DiskSizeGB           int32    `protobuf:"varint,9,opt,name=diskSizeGB,proto3" json:"diskSizeGB,omitempty"`
	DiskPath             string   `protobuf:"bytes,10,opt,name=diskPath,proto3" json:"diskPath,omitempty"`
	Ip                   []string `protobuf:"bytes,12,rep,name=ip,proto3" json:"ip,omitempty"`
}

func (x *Vm) Reset() {
	*x = Vm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vm) ProtoMessage() {}

func (x *Vm) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vm.ProtoReflect.Descriptor instead.
func (*Vm) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{4}
}

func (x *Vm) GetMachineName() string {
	if x != nil {
		return x.MachineName
	}
	return ""
}

func (x *Vm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vm) GetState() VmState {
	if x != nil {
		return x.State
	}
	return VmState_UNKNOWN
}

func (x *Vm) GetNovncPort() string {
	if x != nil {
		return x.NovncPort
	}
	return ""
}

func (x *Vm) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *Vm) GetMemoryMB() int32 {
	if x != nil {
		return x.MemoryMB
	}
	return 0
}

func (x *Vm) GetCurrentCpuUsage() int32 {
	if x != nil {
		return x.CurrentCpuUsage
	}
	return 0
}

func (x *Vm) GetCurrentMemoryUsageMB() int32 {
	if x != nil {
		return x.CurrentMemoryUsageMB
	}
	return 0
}

func (x *Vm) GetDiskSizeGB() int32 {
	if x != nil {
		return x.DiskSizeGB
	}
	return 0
}

func (x *Vm) GetDiskPath() string {
	if x != nil {
		return x.DiskPath
	}
	return ""
}

func (x *Vm) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

type GetVmByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVmByNameRequest) Reset() {
	*x = GetVmByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVmByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVmByNameRequest) ProtoMessage() {}

func (x *GetVmByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVmByNameRequest.ProtoReflect.Descriptor instead.
func (*GetVmByNameRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{5}
}

func (x *GetVmByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetAllVmsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vms      []*Vm    `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
	Warnings []string `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *GetAllVmsResponse) Reset() {
	*x = GetAllVmsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllVmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllVmsResponse) ProtoMessage() {}

func (x *GetAllVmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllVmsResponse.ProtoReflect.Descriptor instead.
func (*GetAllVmsResponse) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllVmsResponse) GetVms() []*Vm {
	if x != nil {
		return x.Vms
	}
	return nil
}

func (x *GetAllVmsResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type CreateVmLiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vm     *CreateVmRequest `protobuf:"bytes,1,opt,name=vm,proto3" json:"vm,omitempty"`
	CpuXml string           `protobuf:"bytes,2,opt,name=cpuXml,proto3" json:"cpuXml,omitempty"`
}

func (x *CreateVmLiveRequest) Reset() {
	*x = CreateVmLiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVmLiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVmLiveRequest) ProtoMessage() {}

func (x *CreateVmLiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVmLiveRequest.ProtoReflect.Descriptor instead.
func (*CreateVmLiveRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{7}
}

func (x *CreateVmLiveRequest) GetVm() *CreateVmRequest {
	if x != nil {
		return x.Vm
	}
	return nil
}

func (x *CreateVmLiveRequest) GetCpuXml() string {
	if x != nil {
		return x.CpuXml
	}
	return ""
}

type MigrateVmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SlaveIp string `protobuf:"bytes,3,opt,name=slaveIp,proto3" json:"slaveIp,omitempty"`
	Live    bool   `protobuf:"varint,4,opt,name=live,proto3" json:"live,omitempty"`
}

func (x *MigrateVmRequest) Reset() {
	*x = MigrateVmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateVmRequest) ProtoMessage() {}

func (x *MigrateVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateVmRequest.ProtoReflect.Descriptor instead.
func (*MigrateVmRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{8}
}

func (x *MigrateVmRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MigrateVmRequest) GetSlaveIp() string {
	if x != nil {
		return x.SlaveIp
	}
	return ""
}

func (x *MigrateVmRequest) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

type CPUXMLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuXML string `protobuf:"bytes,1,opt,name=cpuXML,proto3" json:"cpuXML,omitempty"`
}

func (x *CPUXMLResponse) Reset() {
	*x = CPUXMLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUXMLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUXMLResponse) ProtoMessage() {}

func (x *CPUXMLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUXMLResponse.ProtoReflect.Descriptor instead.
func (*CPUXMLResponse) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{9}
}

func (x *CPUXMLResponse) GetCpuXML() string {
	if x != nil {
		return x.CpuXML
	}
	return ""
}

type UpdateVMCPUXmlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CpuXML string `protobuf:"bytes,2,opt,name=cpuXML,proto3" json:"cpuXML,omitempty"`
}

func (x *UpdateVMCPUXmlRequest) Reset() {
	*x = UpdateVMCPUXmlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virsh_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVMCPUXmlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMCPUXmlRequest) ProtoMessage() {}

func (x *UpdateVMCPUXmlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_virsh_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMCPUXmlRequest.ProtoReflect.Descriptor instead.
func (*UpdateVMCPUXmlRequest) Descriptor() ([]byte, []int) {
	return file_virsh_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateVMCPUXmlRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVMCPUXmlRequest) GetCpuXML() string {
	if x != nil {
		return x.CpuXML
	}
	return ""
}

var File_virsh_proto protoreflect.FileDescriptor

var file_virsh_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x76,
	0x69, 0x72, 0x73, 0x68, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x70, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x76, 0x63, 0x70, 0x75, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x6b, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x47, 0x42, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x47, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x6e, 0x63, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x76, 0x6e, 0x63, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x36,
	0x0a, 0x0a, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x02, 0x56, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x56, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76,
	0x6e, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f,
	0x76, 0x6e, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x42, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x42, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x42, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x42, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x56, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x56, 0x6d,
	0x52, 0x03, 0x76, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x55, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x76, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x58, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x70, 0x75, 0x58, 0x6d, 0x6c, 0x22, 0x54, 0x0a, 0x10, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x28,
	0x0a, 0x0e, 0x43, 0x50, 0x55, 0x58, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x58, 0x4d, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x70, 0x75, 0x58, 0x4d, 0x4c, 0x22, 0x43, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x4d, 0x43, 0x50, 0x55, 0x58, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x58, 0x4d, 0x4c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x75, 0x58, 0x4d, 0x4c, 0x2a, 0x82, 0x01,
	0x0a, 0x07, 0x56, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48,
	0x55, 0x54, 0x4f, 0x46, 0x46, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x41, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4d, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x08, 0x32, 0xb1, 0x07, 0x0a, 0x11, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x56, 0x69, 0x72, 0x73,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43,
	0x70, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x0c, 0x2e, 0x76, 0x69, 0x72,
	0x73, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x70, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x50,
	0x55, 0x58, 0x4d, 0x4c, 0x12, 0x0c, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x15, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x43, 0x50, 0x55, 0x58, 0x4d,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x56, 0x4d, 0x43, 0x50, 0x55, 0x58, 0x6d, 0x6c, 0x12, 0x19, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x43, 0x50, 0x55, 0x58,
	0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x43, 0x50, 0x55, 0x58, 0x6d, 0x6c, 0x12, 0x1c, 0x2e, 0x76,
	0x69, 0x72, 0x73, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x43, 0x50, 0x55,
	0x58, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72,
	0x73, 0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x12, 0x16, 0x2e, 0x76, 0x69, 0x72, 0x73,
	0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x76, 0x65, 0x56, 0x4d, 0x12, 0x1a, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x56, 0x4d,
	0x12, 0x17, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73,
	0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0a,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x4d, 0x12, 0x09, 0x2e, 0x76, 0x69, 0x72,
	0x73, 0x68, 0x2e, 0x56, 0x6d, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x4d, 0x12, 0x09, 0x2e, 0x76, 0x69,
	0x72, 0x73, 0x68, 0x2e, 0x56, 0x6d, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x4d, 0x12, 0x09, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x56, 0x6d, 0x1a,
	0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x4d, 0x12, 0x09,
	0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x56, 0x6d, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73,
	0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x09,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x12, 0x09, 0x2e, 0x76, 0x69, 0x72, 0x73,
	0x68, 0x2e, 0x56, 0x6d, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x56, 0x4d, 0x12, 0x09, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x56, 0x6d, 0x1a, 0x11, 0x2e,
	0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x4d, 0x12, 0x09, 0x2e, 0x76,
	0x69, 0x72, 0x73, 0x68, 0x2e, 0x56, 0x6d, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e,
	0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x56, 0x6d, 0x73, 0x12, 0x0c, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x56, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6d, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x76, 0x69, 0x72, 0x73,
	0x68, 0x2e, 0x56, 0x6d, 0x12, 0x2f, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x73,
	0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x6d, 0x12, 0x09, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e,
	0x56, 0x6d, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x56, 0x6d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x09, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68,
	0x2e, 0x56, 0x6d, 0x1a, 0x11, 0x2e, 0x76, 0x69, 0x72, 0x73, 0x68, 0x2e, 0x4f, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x72, 0x75, 0x71, 0x65, 0x73, 0x2f, 0x35, 0x31, 0x32,
	0x53, 0x76, 0x4d, 0x61, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x69, 0x72, 0x73, 0x68, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_virsh_proto_rawDescOnce sync.Once
	file_virsh_proto_rawDescData = file_virsh_proto_rawDesc
)

func file_virsh_proto_rawDescGZIP() []byte {
	file_virsh_proto_rawDescOnce.Do(func() {
		file_virsh_proto_rawDescData = protoimpl.X.CompressGZIP(file_virsh_proto_rawDescData)
	})
	return file_virsh_proto_rawDescData
}

var file_virsh_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_virsh_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_virsh_proto_goTypes = []interface{}{
	(VmState)(0),                   // 0: virsh.VmState
	(*Empty)(nil),                  // 1: virsh.Empty
	(*GetCpuFeaturesResponse)(nil), // 2: virsh.GetCpuFeaturesResponse
	(*CreateVmRequest)(nil),        // 3: virsh.CreateVmRequest
	(*OkResponse)(nil),             // 4: virsh.OkResponse
	(*Vm)(nil),                     // 5: virsh.Vm
	(*GetVmByNameRequest)(nil),     // 6: virsh.GetVmByNameRequest
	(*GetAllVmsResponse)(nil),      // 7: virsh.GetAllVmsResponse
	(*CreateVmLiveRequest)(nil),    // 8: virsh.CreateVmLiveRequest
	(*MigrateVmRequest)(nil),       // 9: virsh.MigrateVmRequest
	(*CPUXMLResponse)(nil),         // 10: virsh.CPUXMLResponse
	(*UpdateVMCPUXmlRequest)(nil),  // 11: virsh.UpdateVMCPUXmlRequest
}
var file_virsh_proto_depIdxs = []int32{
	0,  // 0: virsh.Vm.state:type_name -> virsh.VmState
	5,  // 1: virsh.GetAllVmsResponse.vms:type_name -> virsh.Vm
	3,  // 2: virsh.CreateVmLiveRequest.vm:type_name -> virsh.CreateVmRequest
	1,  // 3: virsh.SlaveVirshService.GetCpuFeatures:input_type -> virsh.Empty
	1,  // 4: virsh.SlaveVirshService.GetCPUXML:input_type -> virsh.Empty
	6,  // 5: virsh.SlaveVirshService.GetVMCPUXml:input_type -> virsh.GetVmByNameRequest
	11, // 6: virsh.SlaveVirshService.UpdateVMCPUXml:input_type -> virsh.UpdateVMCPUXmlRequest
	3,  // 7: virsh.SlaveVirshService.CreateVm:input_type -> virsh.CreateVmRequest
	8,  // 8: virsh.SlaveVirshService.CreateLiveVM:input_type -> virsh.CreateVmLiveRequest
	9,  // 9: virsh.SlaveVirshService.MigrateVM:input_type -> virsh.MigrateVmRequest
	5,  // 10: virsh.SlaveVirshService.ShutdownVM:input_type -> virsh.Vm
	5,  // 11: virsh.SlaveVirshService.ForceShutdownVM:input_type -> virsh.Vm
	5,  // 12: virsh.SlaveVirshService.StartVM:input_type -> virsh.Vm
	5,  // 13: virsh.SlaveVirshService.RemoveVM:input_type -> virsh.Vm
	5,  // 14: virsh.SlaveVirshService.RestartVM:input_type -> virsh.Vm
	5,  // 15: virsh.SlaveVirshService.PauseVM:input_type -> virsh.Vm
	5,  // 16: virsh.SlaveVirshService.ResumeVM:input_type -> virsh.Vm
	1,  // 17: virsh.SlaveVirshService.GetAllVms:input_type -> virsh.Empty
	6,  // 18: virsh.SlaveVirshService.GetVmByName:input_type -> virsh.GetVmByNameRequest
	5,  // 19: virsh.SlaveVirshService.RemoveIsoFromVm:input_type -> virsh.Vm
	5,  // 20: virsh.SlaveVirshService.EditVmResources:input_type -> virsh.Vm
	2,  // 21: virsh.SlaveVirshService.GetCpuFeatures:output_type -> virsh.GetCpuFeaturesResponse
	10, // 22: virsh.SlaveVirshService.GetCPUXML:output_type -> virsh.CPUXMLResponse
	10, // 23: virsh.SlaveVirshService.GetVMCPUXml:output_type -> virsh.CPUXMLResponse
	4,  // 24: virsh.SlaveVirshService.UpdateVMCPUXml:output_type -> virsh.OkResponse
	4,  // 25: virsh.SlaveVirshService.CreateVm:output_type -> virsh.OkResponse
	4,  // 26: virsh.SlaveVirshService.CreateLiveVM:output_type -> virsh.OkResponse
	4,  // 27: virsh.SlaveVirshService.MigrateVM:output_type -> virsh.OkResponse
	4,  // 28: virsh.SlaveVirshService.ShutdownVM:output_type -> virsh.OkResponse
	4,  // 29: virsh.SlaveVirshService.ForceShutdownVM:output_type -> virsh.OkResponse
	4,  // 30: virsh.SlaveVirshService.StartVM:output_type -> virsh.OkResponse
	4,  // 31: virsh.SlaveVirshService.RemoveVM:output_type -> virsh.OkResponse
	4,  // 32: virsh.SlaveVirshService.RestartVM:output_type -> virsh.OkResponse
	4,  // 33: virsh.SlaveVirshService.PauseVM:output_type -> virsh.OkResponse
	4,  // 34: virsh.SlaveVirshService.ResumeVM:output_type -> virsh.OkResponse
	7,  // 35: virsh.SlaveVirshService.GetAllVms:output_type -> virsh.GetAllVmsResponse
	5,  // 36: virsh.SlaveVirshService.GetVmByName:output_type -> virsh.Vm
	4,  // 37: virsh.SlaveVirshService.RemoveIsoFromVm:output_type -> virsh.OkResponse
	4,  // 38: virsh.SlaveVirshService.EditVmResources:output_type -> virsh.OkResponse
	21, // [21:39] is the sub-list for method output_type
	3,  // [3:21] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_virsh_proto_init() }
func file_virsh_proto_init() {
	if File_virsh_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_virsh_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCpuFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVmByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllVmsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVmLiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateVmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUXMLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virsh_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVMCPUXmlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_virsh_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_virsh_proto_goTypes,
		DependencyIndexes: file_virsh_proto_depIdxs,
		EnumInfos:         file_virsh_proto_enumTypes,
		MessageInfos:      file_virsh_proto_msgTypes,
	}.Build()
	File_virsh_proto = out.File
	file_virsh_proto_rawDesc = nil
	file_virsh_proto_goTypes = nil
	file_virsh_proto_depIdxs = nil
}
