// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: extra.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExtraService_SendWebsocketMessage_FullMethodName = "/extra.ExtraService/SendWebsocketMessage"
	ExtraService_CheckForUpdates_FullMethodName      = "/extra.ExtraService/CheckForUpdates"
	ExtraService_PerformUpdate_FullMethodName        = "/extra.ExtraService/PerformUpdate"
)

// ExtraServiceClient is the client API for ExtraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtraServiceClient interface {
	// master
	SendWebsocketMessage(ctx context.Context, in *WebsocketMessage, opts ...grpc.CallOption) (*Empty, error)
	// master
	CheckForUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllUpdates, error)
	PerformUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Empty, error)
}

type extraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtraServiceClient(cc grpc.ClientConnInterface) ExtraServiceClient {
	return &extraServiceClient{cc}
}

func (c *extraServiceClient) SendWebsocketMessage(ctx context.Context, in *WebsocketMessage, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExtraService_SendWebsocketMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extraServiceClient) CheckForUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllUpdates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllUpdates)
	err := c.cc.Invoke(ctx, ExtraService_CheckForUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extraServiceClient) PerformUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ExtraService_PerformUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtraServiceServer is the server API for ExtraService service.
// All implementations must embed UnimplementedExtraServiceServer
// for forward compatibility
type ExtraServiceServer interface {
	// master
	SendWebsocketMessage(context.Context, *WebsocketMessage) (*Empty, error)
	// master
	CheckForUpdates(context.Context, *Empty) (*AllUpdates, error)
	PerformUpdate(context.Context, *UpdateRequest) (*Empty, error)
	mustEmbedUnimplementedExtraServiceServer()
}

// UnimplementedExtraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExtraServiceServer struct {
}

func (UnimplementedExtraServiceServer) SendWebsocketMessage(context.Context, *WebsocketMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebsocketMessage not implemented")
}
func (UnimplementedExtraServiceServer) CheckForUpdates(context.Context, *Empty) (*AllUpdates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForUpdates not implemented")
}
func (UnimplementedExtraServiceServer) PerformUpdate(context.Context, *UpdateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformUpdate not implemented")
}
func (UnimplementedExtraServiceServer) mustEmbedUnimplementedExtraServiceServer() {}

// UnsafeExtraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtraServiceServer will
// result in compilation errors.
type UnsafeExtraServiceServer interface {
	mustEmbedUnimplementedExtraServiceServer()
}

func RegisterExtraServiceServer(s grpc.ServiceRegistrar, srv ExtraServiceServer) {
	s.RegisterService(&ExtraService_ServiceDesc, srv)
}

func _ExtraService_SendWebsocketMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsocketMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraServiceServer).SendWebsocketMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtraService_SendWebsocketMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraServiceServer).SendWebsocketMessage(ctx, req.(*WebsocketMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtraService_CheckForUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraServiceServer).CheckForUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtraService_CheckForUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraServiceServer).CheckForUpdates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtraService_PerformUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraServiceServer).PerformUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtraService_PerformUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraServiceServer).PerformUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtraService_ServiceDesc is the grpc.ServiceDesc for ExtraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "extra.ExtraService",
	HandlerType: (*ExtraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWebsocketMessage",
			Handler:    _ExtraService_SendWebsocketMessage_Handler,
		},
		{
			MethodName: "CheckForUpdates",
			Handler:    _ExtraService_CheckForUpdates_Handler,
		},
		{
			MethodName: "PerformUpdate",
			Handler:    _ExtraService_PerformUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "extra.proto",
}
